exit
rounded(tax).percent_of(price)
rounded(tax)
tax
exit
n
n.ceil
n = (a / round)
(a / round)
b = (a / round)
round = BigDecimal.new("0.05")
a = ((27.99 * 15 )/ BigDecimal.new("100"))
b = (a / rf)
rf = BigDecimal.new("0.05")
rf = BigDecimal.new("0.05")'
a = ((27.99 * 15 )/ BigDecimal.new("100"))
a = 0
rf
a
b = (a / rf)
b  = (a / rf)
b  = a / rf
a / rf
rf = BigDecimal.new("0.05")
a = ((27.99 * 15 )/ BigDecimal.new("100"))
((27.99 * 15 )/ 100)
((27.99 * 15 )/ BigDecimal.new("100"))
((27.99 * 15 )/ BigDecimal.new("100")).round(2)
(27.99 * 15 )/ BigDecimal.new("100")
27.99 * 15 
rounded(tax.percent_of(p))
rounded(tax.percent_of(p)
tax.percent_of(p)
p = BigDecimal.new(price.to_s)
p = BigDecimal.new(price)
require 'bigdecimal'
p = BigDecimal.new(price)
price
rounded(tax.percent_of(price))
exit
rounded(tax.percent_of(price))
exit
tax.percent_of(price)
price
tax
rounded(tax.percent_of(price))
exit
32.1885.round(1)
r32.1885.round(1)
rounded(32.1885.round(1))
rounded(32.1885.round)
rounded(32.1885.round(2))
rounded(32.1885)
27.99.to_f + (27.99.to_f * 0.15)
27.99.to_f
15.to_f / 100.to_f
15.to_f
tax
rounded(tax.percent_of(price))
exit
tax
rounded(tax.percent_of(price))
exit
rounded(tax.percent_of(price))
exit
rounded(tax.percent_of(price))
exit
rounded(tax.percent_of(price))
exit
rounded(32.19)
32.1885.round(2)
rounded(32.18)
rounded(32.1885)
tax.percent_of(27.99)
price
tax
exit
rounded(tax.percent_of(price))
exit
(54.63 * nc).ceil / nc
(54.63 * nc).ceil /
(54.63 * nc)
nc = 1 / 0.05
1 / 0.05
54.625.floor
54.625.flor
54.625.
54.625.ceil(2)
54.625.round(2)
54.625.round(1)
54.625.round
54.625
47.50 + 7.13
7.125.round_to(2)
47.50 * 0.15
15.0 / 100.0
47.50 /100
tax.percent_of(price)
price
tax
exit
other.price + (other.price * (10.0/ 100.0))
other.price + (other.price * (10.0/ 100.0)
other.price
context.calculate
context_calculate
exit
tax.percent_of(price)
price
tax
exit
47.50 + (47.50 * (15.0 / 100.0))
47.50 + (15.0 / 100.0)
47.50 + 7.125
47.50 * 0.15
47.50 * .15
15.0/ 100.0
15 .0/ 100.0
15/ 100
47.50 / 15
47.50 / 15.0
14.99 + 1.50
14.99 + 1.49
14.99 / 10
15.0.percent_of(27.99)
27.99 / 15.0
27.99 + 5.598
27.99 / 5.0
300 / 10
100 / 10
9.99 / 10.0
price.percent_of(tax)
tax.percent_of(price)
price
tax
exit
tax.percent_of(price)
exit
end
  end
    self.to_f / n.to_f * 100.0
  def percent_of(n)
class Numeric
tax.percent_of(price)
price
tax
exit
tax_percentage
price
exit
@context.calculate
exit
@context.calculate
exit
@context.calculate
@context.compute
exit
@context.compute
exit
tax_array
exit
SalesTax::Values.const_get(@imported.to_s.upcase)
tax_array
exit
@context.compute
exit
@context.compute
exit
@context.compute
exit
@context.compute
exit
@context.compute
exit
@context.compute
exit
@context.compute
exit
@context.compute
exit
@context.compute
exit
@context.compute
@context
