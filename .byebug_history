exit
file.include?("Sales Taxes:  9.00")
file.include?("Sales Taxes: 9.00")
file.include?("Sales Taxes: 9.00
file.each_line { |i| p i }
file
exit
file
exit
file = File.open("outputs/21.odut").read
file
exit
@receipt
exit
book
exit
type
tax
tax_amount
price
exit
tax_amount
price
exit
tax_amount
price
exit
"asdf/sadf.txt".split("/")
File.open(file).to_path
File.open(file).path
File.open(file).methods
File.open(file).name
file.name
file
exit
@order.items
@order
exit
@price
@name
exit
@taxed_price
@sales_tax
@imported
@type
@price
@name
exit
@name
exit
@name
exit
product2.sales_tax
product1.
product1.sales_taz
exit
@items.first
@items
exit
a
exit
calculator.calculate do |a,b|
calculator.calculate
exit
@sales_tax
@imported
@type
@price
@name
exit
book
exit
Product.new(true,true)
exit
Product.new(true,true)
exit
Product.new(true,true)
exit
Product.new(true,true)
product1
product1.valid?
product1.name = 0.0
product1.valid?
exit
product1.name = 0.0
exit
Product.new(
exit
product
exit
product
exit
food
ProductParser.perform(food)
food
exit
food
exit
food
ProductParser.perform(food)
exit
food
a = ProductParser.new(food)
ProductParser.perform(food)
product
exit
exitexit
exit
@identified_text
value.include?(@identified_text)
value
vlaue
continue
key
value
exit
a
a.set_attrs
a = ProductParser.new(food)
exit
a
a.set_attrs
a.set_attra
a = ProductParser.new(food)
ProductParser.perform(food)
exit
exity
ProductParser.perform(food)
exit
ProductParser.perform(food)
exit
ProductParser.perform(food)
product
exit
ProductParser.perform(food)
food
product
exit
rounded(tax).percent_of(price)
rounded(tax)
tax
exit
n
n.ceil
n = (a / round)
(a / round)
b = (a / round)
round = BigDecimal.new("0.05")
a = ((27.99 * 15 )/ BigDecimal.new("100"))
b = (a / rf)
rf = BigDecimal.new("0.05")
rf = BigDecimal.new("0.05")'
a = ((27.99 * 15 )/ BigDecimal.new("100"))
a = 0
rf
a
b = (a / rf)
b  = (a / rf)
b  = a / rf
a / rf
rf = BigDecimal.new("0.05")
a = ((27.99 * 15 )/ BigDecimal.new("100"))
((27.99 * 15 )/ 100)
((27.99 * 15 )/ BigDecimal.new("100"))
((27.99 * 15 )/ BigDecimal.new("100")).round(2)
(27.99 * 15 )/ BigDecimal.new("100")
27.99 * 15 
rounded(tax.percent_of(p))
rounded(tax.percent_of(p)
tax.percent_of(p)
p = BigDecimal.new(price.to_s)
p = BigDecimal.new(price)
require 'bigdecimal'
p = BigDecimal.new(price)
price
rounded(tax.percent_of(price))
exit
rounded(tax.percent_of(price))
exit
tax.percent_of(price)
price
tax
rounded(tax.percent_of(price))
exit
32.1885.round(1)
r32.1885.round(1)
rounded(32.1885.round(1))
rounded(32.1885.round)
rounded(32.1885.round(2))
rounded(32.1885)
27.99.to_f + (27.99.to_f * 0.15)
27.99.to_f
15.to_f / 100.to_f
15.to_f
tax
rounded(tax.percent_of(price))
exit
tax
rounded(tax.percent_of(price))
exit
rounded(tax.percent_of(price))
exit
rounded(tax.percent_of(price))
exit
rounded(tax.percent_of(price))
exit
rounded(32.19)
32.1885.round(2)
rounded(32.18)
rounded(32.1885)
tax.percent_of(27.99)
price
tax
exit
rounded(tax.percent_of(price))
exit
(54.63 * nc).ceil / nc
(54.63 * nc).ceil /
(54.63 * nc)
nc = 1 / 0.05
1 / 0.05
54.625.floor
54.625.flor
54.625.
54.625.ceil(2)
54.625.round(2)
54.625.round(1)
54.625.round
54.625
47.50 + 7.13
7.125.round_to(2)
47.50 * 0.15
15.0 / 100.0
47.50 /100
tax.percent_of(price)
price
tax
exit
other.price + (other.price * (10.0/ 100.0))
other.price + (other.price * (10.0/ 100.0)
other.price
context.calculate
context_calculate
exit
tax.percent_of(price)
price
tax
exit
47.50 + (47.50 * (15.0 / 100.0))
47.50 + (15.0 / 100.0)
47.50 + 7.125
47.50 * 0.15
47.50 * .15
15.0/ 100.0
15 .0/ 100.0
15/ 100
